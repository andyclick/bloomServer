#ifndef _UTILCPP_H_
#define _UTILCPP_H_
#include <algorithm>
#include <string>
#include "FSBigFile.h"
#include "MyConnection.h"

using namespace std;

static char charsetpool_contents[341][64] =
{
    "l6",
    "l1",
    "hz",
    "l4",
    "l5",
    "r8",
    "l8",
    "866",
    "l2",
    "sjis",
    "iso-ir-6",
    "iso-ir-166",
    "latin6",
    "latin1",
    "iso-ir-14",
    "l3",
    "latin4",
    "iso-ir-165",
    "latin5",
    "iso-ir-126",
    "862",
    "iso-ir-144",
    "latin8",
    "iso-ir-58",
    "iso-ir-148",
    "l7",
    "latin-9",
    "iso-ir-149",
    "iso-ir-159",
    "iso-ir-226",
    "latin2",
    "iso8859-6",
    "iso-ir-199",
    "iso8859-1",
    "iso-8859-6",
    "iso_8859-6",
    "iso8859-16",
    "pt154",
    "iso-8859-1",
    "iso_8859-1",
    "iso8859-11",
    "iso-8859-16",
    "iso_8859-16",
    "cn",
    "iso-8859-11",
    "iso_8859-11",
    "iso8859-4",
    "iso_8859-16:2001",
    "iso8859-5",
    "iso-8859-4",
    "iso_8859-4",
    "iso8859-14",
    "iso-ir-101",
    "iso-8859-5",
    "iso_8859-5",
    "iso8859-15",
    "iso-8859-14",
    "iso_8859-14",
    "iso8859-8",
    "iso-8859-15",
    "iso_8859-15",
    "iso8859-9",
    "iso-8859-8",
    "iso_8859-8",
    "cp866",
    "iso-ir-138",
    "iso-8859-9",
    "iso_8859-9",
    "iso_8859-14:1998",
    "iso_8859-15:1998",
    "elot_928",
    "tcvn",
    "c99",
    "iso8859-2",
    "cp154",
    "iso-8859-2",
    "iso_8859-2",
    "iso-ir-109",
    "l10",
    "char",
    "cp1256",
    "iso-ir-179",
    "iso646-cn",
    "ascii",
    "cp1251",
    "latin3",
    "850",
    "gb2312",
    "cp819",
    "cp1254",
    "cp949",
    "cp1255",
    "cp862",
    "us",
    "cp1361",
    "cp1258",
    "iso-ir-110",
    "ibm866",
    "cp936",
    "georgian-ps",
    "latin10",
    "chinese",
    "cp1252",
    "latin7",
    "iso_8859-10:1992",
    "iso-ir-57",
    "tis620",
    "iso8859-3",
    "ucs-4",
    "iso-ir-87",
    "tis-620",
    "iso-ir-157",
    "iso-8859-3",
    "iso_8859-3",
    "iso8859-13",
    "csisolatin6",
    "big5",
    "iso-8859-13",
    "iso_8859-13",
    "csisolatin1",
    "koi8-r",
    "big-5",
    "ibm819",
    "iso-ir-127",
    "cp874",
    "iso646-us",
    "viscii",
    "ms-ee",
    "ms-ansi",
    "csisolatin4",
    "ibm862",
    "cp932",
    "x0212",
    "csisolatin5",
    "ucs-2",
    "iso8859-10",
    "ms936",
    "wchar_t",
    "iso-8859-10",
    "iso_8859-10",
    "utf-16",
    "euccn",
    "roman8",
    "iso-ir-203",
    "iso8859-7",
    "koi8-t",
    "euc-cn",
    "ucs-4le",
    "iso-ir-100",
    "iso-8859-7",
    "iso_8859-7",
    "mulelao-1",
    "gb_1988-80",
    "x0201",
    "ecma-114",
    "csisolatin2",
    "georgian-academy",
    "ptcp154",
    "ucs-2le",
    "cp1253",
    "utf-8",
    "hp-roman8",
    "csascii",
    "ecma-118",
    "ucs-4-internal",
    "tcvn5712-1",
    "korean",
    "cp850",
    "ms-cyrl",
    "cp950",
    "tis620-0",
    "x0208",
    "greek8",
    "ucs-2-internal",
    "tcvn-5712",
    "cp1133",
    "cp1250",
    "iso-2022-cn",
    "utf-16le",
    "cyrillic-asian",
    "iso-10646-ucs-4",
    "iso-2022-cn-ext",
    "cp1257",
    "jp",
    "euckr",
    "iso-10646-ucs-2",
    "gb18030",
    "euc-kr",
    "cskoi8r",
    "csbig5",
    "cp367",
    "macintosh",
    "csisolatin3",
    "cn-big5",
    "cyrillic",
    "csviscii",
    "ibm850",
    "macthai",
    "unicode-1-1",
    "iso_646.irv:1991",
    "us-ascii",
    "utf-32",
    "cn-gb-isoir165",
    "nextstep",
    "mac",
    "extended_unix_code_packed_format_for_japanese",
    "csisolatinarabic",
    "hz-gb-2312",
    "armscii-8",
    "csisolatinhebrew",
    "iso-2022-kr",
    "windows-1256",
    "uhc",
    "windows-1251",
    "ms-hebr",
    "iso-celtic",
    "utf-32le",
    "windows-1254",
    "windows-1255",
    "shift-jis",
    "shift_jis",
    "ibm367",
    "windows-1258",
    "csptcp154",
    "gbk",
    "unicodelittle",
    "windows-1252",
    "utf-7",
    "ksc_5601",
    "asmo-708",
    "csiso2022cn",
    "bigfive",
    "windows-936",
    "csucs4",
    "big-five",
    "iso646-jp",
    "tis620.2529-1",
    "csisolatingreek",
    "csisolatincyrillic",
    "ucs-4be",
    "unicode-1-1-utf-7",
    "euctw",
    "windows-1253",
    "cshproman8",
    "euc-tw",
    "ks_c_5601-1989",
    "ucs-2be",
    "viscii1.1-1",
    "greek",
    "windows-1250",
    "csgb2312",
    "windows-874",
    "csunicode11",
    "java",
    "windows-1257",
    "csunicode",
    "cshalfwidthkatakana",
    "csiso57gb1988",
    "maciceland",
    "csibm866",
    "utf-16be",
    "arabic",
    "cn-gb",
    "csiso2022kr",
    "csmacintosh",
    "jis0208",
    "macroman",
    "iso_8859-4:1988",
    "iso_8859-5:1988",
    "tis620.2533-1",
    "ansi_x3.4-1986",
    "iso_8859-8:1988",
    "ks_c_5601-1987",
    "csshiftjis",
    "hebrew",
    "iso_8859-9:1989",
    "maccroatian",
    "iso-2022-jp-1",
    "eucjp",
    "ansi_x3.4-1968",
    "euc-jp",
    "csiso58gb231280",
    "jis_c6226-1983",
    "ibm-cp1133",
    "maccentraleurope",
    "csiso159jisx02121990",
    "iso-2022-jp-2",
    "csunicode11utf7",
    "ucs-4-swapped",
    "unicodebig",
    "csiso14jisc6220ro",
    "jis_c6220-1969-ro",
    "iso_8859-3:1988",
    "cspc862latinhebrew",
    "big5hkscs",
    "iso_8859-6:1987",
    "ucs-2-swapped",
    "iso_8859-1:1987",
    "big5-hkscs",
    "utf-32be",
    "iso-2022-jp",
    "koi8-u",
    "tis620.2533-0",
    "koi8-ru",
    "iso_8859-2:1987",
    "macromania",
    "jis_x0212",
    "cseuckr",
    "maccyrillic",
    "iso_8859-7:2003",
    "ms-arab",
    "ms-greek",
    "csksc56011987",
    "jis_x0201",
    "iso_8859-7:1987",
    "csiso2022jp2",
    "jis_x0208",
    "jisx0201-1976",
    "jis_x0212-1990",
    "csiso2022jp",
    "johab",
    "ms_kanji",
    "csiso87jisx0208",
    "macturkish",
    "tcvn5712-1:1993",
    "jis_x0208-1983",
    "cseuctw",
    "macgreek",
    "jis_x0208-1990",
    "winbaltrim",
    "ms-turk",
    "macukraine",
    "macarabic",
    "cspc850multilingual",
    "machebrew",
    "jis_x0212.1990-0",
    "big5-hkscs:2001",
    "big5-hkscs:2004",
    "big5-hkscs:1999",
    "cseucpkdfmtjapanese"
}; 

void toLowercase(string &str); 
void replacestr(string &str, string srstr, string dsstr);
string::size_type findcase(string haystack, string needle);
void erasestr(string &str , string substr);
int WriteContent(FSBigFile *bigfile, char *key, int keylen, char *data, int datalen); 
int ReadContent(FSBigFile *bigfile, char **key, int *keylen, char **data, int *datalen); 
int getlines(FSBigFile *logfile, char* p);
int openConnect(MyConnection &connection, string &servername, int port, 
    int timeout, int retries); 
int connectServer(MyConnection &connection); 
string stringstrim(string &src, const char *trim = NULL); 
int initlocalip(vector<string> &localips, char * localip);
bool szReplaceReply(char* szStr,const char* szSrc,int intDst);
bool szReplaceReply(char* szStr,const char* szSrc,const char* szDst);
bool szReplace(char* szStr,const char* szSrc,const char* szDst);
string  regexreplace(string  str, char * src, char *desc);
void charreplace(char *str, char oldchar, char newchar);
void charreplace(char *str, int length, char oldchar, char newchar);
string GetEncoding(char *html, size_t len, string &charsetByGiven);
string _GetEncoding(const char *html, int len);
string ValidateCharsets(string charset); 
string _GetEncoding1(char *html, int len);
void toLowerCase(char *des, char *src, size_t len);
int tog(char *inputCharset, char *,const char *inbuf, unsigned int inlen, char *outbuf, unsigned int &outlen );
int tog( string &str ,char *inputCharset, char * outputCharset);
char *tog( char* str, char *inputCharset , char * outputCharset);
int code_convert(const char *from_charset,const char *to_charset,char *inbuf,int inlen,char *outbuf,int outlen);
void InitialCharsets();
int serializeLong(char *&buf, long a); 
int serializeInt(char *&buf, int a); 
int serializeChar(char *&buf, char a); 
int serializeString(char *&buf, char *a); 
int serializeBool(char *&buf, bool a); 
int serializeULongLong(char *&buf, ulonglong a);

int unserializeLong(char *&buf, long &a); 
int unserializeInt(char *&buf, int &a); 
int unserializeChar(char *&buf, char &a); 
int unserializeString(char *&buf, char *a); 
int unserializeBool(char *&buf, bool &a); 
int unserializeULongLong(char *&buf, ulonglong &a);
#endif
