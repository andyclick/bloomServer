/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef msg_TYPES_H
#define msg_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _ITEM__isset {
  _ITEM__isset() : url(false), isExist(false) {}
  bool url;
  bool isExist;
} _ITEM__isset;

class ITEM {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  ITEM() : url(), isExist(0) {
  }

  virtual ~ITEM() throw() {}

  std::string url;
  bool isExist;

  _ITEM__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_isExist(const bool val) {
    isExist = val;
  }

  bool operator == (const ITEM & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(isExist == rhs.isExist))
      return false;
    return true;
  }
  bool operator != (const ITEM &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITEM & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ITEM &a, ITEM &b);



#endif
