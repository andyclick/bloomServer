/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef DataService_TYPES_H
#define DataService_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace DataService {

typedef struct _PageNode__isset {
  _PageNode__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _PageNode__isset;

class PageNode {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  PageNode() : key(""), value("") {
  }

  virtual ~PageNode() throw() {}

  std::string key;
  std::string value;

  _PageNode__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const PageNode & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PageNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PageData__isset {
  _PageData__isset() : datas(false) {}
  bool datas;
} _PageData__isset;

class PageData {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  PageData() {
  }

  virtual ~PageData() throw() {}

  std::vector<PageNode>  datas;

  _PageData__isset __isset;

  void __set_datas(const std::vector<PageNode> & val) {
    datas = val;
  }

  bool operator == (const PageData & rhs) const
  {
    if (!(datas == rhs.datas))
      return false;
    return true;
  }
  bool operator != (const PageData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
