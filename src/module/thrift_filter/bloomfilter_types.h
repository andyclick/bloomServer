/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef bloomfilter_TYPES_H
#define bloomfilter_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _element__isset {
  _element__isset() : is_exist(false), url(false) {}
  bool is_exist;
  bool url;
} _element__isset;

class element {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  element() : is_exist(0), url() {
  }

  virtual ~element() throw() {}

  int16_t is_exist;
  std::string url;

  _element__isset __isset;

  void __set_is_exist(const int16_t val) {
    is_exist = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const element & rhs) const
  {
    if (!(is_exist == rhs.is_exist))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const element &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const element & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(element &a, element &b);

typedef struct _memInfo__isset {
  _memInfo__isset() : key(false), size(false) {}
  bool key;
  bool size;
} _memInfo__isset;

class memInfo {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  memInfo() : key(), size(0) {
  }

  virtual ~memInfo() throw() {}

  std::string key;
  int32_t size;

  _memInfo__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const memInfo & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const memInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const memInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(memInfo &a, memInfo &b);



#endif
