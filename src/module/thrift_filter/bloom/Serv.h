/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Serv_H
#define Serv_H

#include <thrift/TDispatchProcessor.h>
#include "bloomfilter_types.h"



class ServIf {
 public:
  virtual ~ServIf() {}
  virtual int16_t add(const std::string& key, const int32_t max_elements, const double false_rate) = 0;
  virtual void fill(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url) = 0;
  virtual void get(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url) = 0;
  virtual void get_stats(std::vector<memInfo> & _return) = 0;
  virtual void get_blooms_stats(std::vector<memInfo> & _return) = 0;
  virtual void get_bloom_stats(std::vector<memInfo> & _return, const std::string& key) = 0;
  virtual int16_t set_mem(const int32_t size) = 0;
  virtual int16_t get_one(const std::string& key, const std::string& url) = 0;
  virtual int16_t fill_one(const std::string& key, const std::string& url) = 0;
  virtual int16_t delete_blooms(const std::string& key) = 0;
  virtual int16_t delete_blooms_all() = 0;
};

class ServIfFactory {
 public:
  typedef ServIf Handler;

  virtual ~ServIfFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServIf* /* handler */) = 0;
};

class ServIfSingletonFactory : virtual public ServIfFactory {
 public:
  ServIfSingletonFactory(const boost::shared_ptr<ServIf>& iface) : iface_(iface) {}
  virtual ~ServIfSingletonFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServIf> iface_;
};

class ServNull : virtual public ServIf {
 public:
  virtual ~ServNull() {}
  int16_t add(const std::string& /* key */, const int32_t /* max_elements */, const double /* false_rate */) {
    int16_t _return = 0;
    return _return;
  }
  void fill(std::vector<element> & /* _return */, const std::string& /* key */, const std::vector<element> & /* vector_url */) {
    return;
  }
  void get(std::vector<element> & /* _return */, const std::string& /* key */, const std::vector<element> & /* vector_url */) {
    return;
  }
  void get_stats(std::vector<memInfo> & /* _return */) {
    return;
  }
  void get_blooms_stats(std::vector<memInfo> & /* _return */) {
    return;
  }
  void get_bloom_stats(std::vector<memInfo> & /* _return */, const std::string& /* key */) {
    return;
  }
  int16_t set_mem(const int32_t /* size */) {
    int16_t _return = 0;
    return _return;
  }
  int16_t get_one(const std::string& /* key */, const std::string& /* url */) {
    int16_t _return = 0;
    return _return;
  }
  int16_t fill_one(const std::string& /* key */, const std::string& /* url */) {
    int16_t _return = 0;
    return _return;
  }
  int16_t delete_blooms(const std::string& /* key */) {
    int16_t _return = 0;
    return _return;
  }
  int16_t delete_blooms_all() {
    int16_t _return = 0;
    return _return;
  }
};

typedef struct _Serv_add_args__isset {
  _Serv_add_args__isset() : key(false), max_elements(false), false_rate(false) {}
  bool key;
  bool max_elements;
  bool false_rate;
} _Serv_add_args__isset;

class Serv_add_args {
 public:

  Serv_add_args() : key(), max_elements(0), false_rate(0) {
  }

  virtual ~Serv_add_args() throw() {}

  std::string key;
  int32_t max_elements;
  double false_rate;

  _Serv_add_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_max_elements(const int32_t val) {
    max_elements = val;
  }

  void __set_false_rate(const double val) {
    false_rate = val;
  }

  bool operator == (const Serv_add_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(max_elements == rhs.max_elements))
      return false;
    if (!(false_rate == rhs.false_rate))
      return false;
    return true;
  }
  bool operator != (const Serv_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_add_pargs {
 public:


  virtual ~Serv_add_pargs() throw() {}

  const std::string* key;
  const int32_t* max_elements;
  const double* false_rate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_add_result__isset {
  _Serv_add_result__isset() : success(false) {}
  bool success;
} _Serv_add_result__isset;

class Serv_add_result {
 public:

  Serv_add_result() : success(0) {
  }

  virtual ~Serv_add_result() throw() {}

  int16_t success;

  _Serv_add_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_add_presult__isset {
  _Serv_add_presult__isset() : success(false) {}
  bool success;
} _Serv_add_presult__isset;

class Serv_add_presult {
 public:


  virtual ~Serv_add_presult() throw() {}

  int16_t* success;

  _Serv_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_fill_args__isset {
  _Serv_fill_args__isset() : key(false), vector_url(false) {}
  bool key;
  bool vector_url;
} _Serv_fill_args__isset;

class Serv_fill_args {
 public:

  Serv_fill_args() : key() {
  }

  virtual ~Serv_fill_args() throw() {}

  std::string key;
  std::vector<element>  vector_url;

  _Serv_fill_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_vector_url(const std::vector<element> & val) {
    vector_url = val;
  }

  bool operator == (const Serv_fill_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(vector_url == rhs.vector_url))
      return false;
    return true;
  }
  bool operator != (const Serv_fill_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_fill_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_fill_pargs {
 public:


  virtual ~Serv_fill_pargs() throw() {}

  const std::string* key;
  const std::vector<element> * vector_url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_fill_result__isset {
  _Serv_fill_result__isset() : success(false) {}
  bool success;
} _Serv_fill_result__isset;

class Serv_fill_result {
 public:

  Serv_fill_result() {
  }

  virtual ~Serv_fill_result() throw() {}

  std::vector<element>  success;

  _Serv_fill_result__isset __isset;

  void __set_success(const std::vector<element> & val) {
    success = val;
  }

  bool operator == (const Serv_fill_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_fill_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_fill_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_fill_presult__isset {
  _Serv_fill_presult__isset() : success(false) {}
  bool success;
} _Serv_fill_presult__isset;

class Serv_fill_presult {
 public:


  virtual ~Serv_fill_presult() throw() {}

  std::vector<element> * success;

  _Serv_fill_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_get_args__isset {
  _Serv_get_args__isset() : key(false), vector_url(false) {}
  bool key;
  bool vector_url;
} _Serv_get_args__isset;

class Serv_get_args {
 public:

  Serv_get_args() : key() {
  }

  virtual ~Serv_get_args() throw() {}

  std::string key;
  std::vector<element>  vector_url;

  _Serv_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_vector_url(const std::vector<element> & val) {
    vector_url = val;
  }

  bool operator == (const Serv_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(vector_url == rhs.vector_url))
      return false;
    return true;
  }
  bool operator != (const Serv_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_get_pargs {
 public:


  virtual ~Serv_get_pargs() throw() {}

  const std::string* key;
  const std::vector<element> * vector_url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_result__isset {
  _Serv_get_result__isset() : success(false) {}
  bool success;
} _Serv_get_result__isset;

class Serv_get_result {
 public:

  Serv_get_result() {
  }

  virtual ~Serv_get_result() throw() {}

  std::vector<element>  success;

  _Serv_get_result__isset __isset;

  void __set_success(const std::vector<element> & val) {
    success = val;
  }

  bool operator == (const Serv_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_presult__isset {
  _Serv_get_presult__isset() : success(false) {}
  bool success;
} _Serv_get_presult__isset;

class Serv_get_presult {
 public:


  virtual ~Serv_get_presult() throw() {}

  std::vector<element> * success;

  _Serv_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Serv_get_stats_args {
 public:

  Serv_get_stats_args() {
  }

  virtual ~Serv_get_stats_args() throw() {}


  bool operator == (const Serv_get_stats_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Serv_get_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_get_stats_pargs {
 public:


  virtual ~Serv_get_stats_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_stats_result__isset {
  _Serv_get_stats_result__isset() : success(false) {}
  bool success;
} _Serv_get_stats_result__isset;

class Serv_get_stats_result {
 public:

  Serv_get_stats_result() {
  }

  virtual ~Serv_get_stats_result() throw() {}

  std::vector<memInfo>  success;

  _Serv_get_stats_result__isset __isset;

  void __set_success(const std::vector<memInfo> & val) {
    success = val;
  }

  bool operator == (const Serv_get_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_stats_presult__isset {
  _Serv_get_stats_presult__isset() : success(false) {}
  bool success;
} _Serv_get_stats_presult__isset;

class Serv_get_stats_presult {
 public:


  virtual ~Serv_get_stats_presult() throw() {}

  std::vector<memInfo> * success;

  _Serv_get_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Serv_get_blooms_stats_args {
 public:

  Serv_get_blooms_stats_args() {
  }

  virtual ~Serv_get_blooms_stats_args() throw() {}


  bool operator == (const Serv_get_blooms_stats_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Serv_get_blooms_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_blooms_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_get_blooms_stats_pargs {
 public:


  virtual ~Serv_get_blooms_stats_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_blooms_stats_result__isset {
  _Serv_get_blooms_stats_result__isset() : success(false) {}
  bool success;
} _Serv_get_blooms_stats_result__isset;

class Serv_get_blooms_stats_result {
 public:

  Serv_get_blooms_stats_result() {
  }

  virtual ~Serv_get_blooms_stats_result() throw() {}

  std::vector<memInfo>  success;

  _Serv_get_blooms_stats_result__isset __isset;

  void __set_success(const std::vector<memInfo> & val) {
    success = val;
  }

  bool operator == (const Serv_get_blooms_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_blooms_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_blooms_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_blooms_stats_presult__isset {
  _Serv_get_blooms_stats_presult__isset() : success(false) {}
  bool success;
} _Serv_get_blooms_stats_presult__isset;

class Serv_get_blooms_stats_presult {
 public:


  virtual ~Serv_get_blooms_stats_presult() throw() {}

  std::vector<memInfo> * success;

  _Serv_get_blooms_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_get_bloom_stats_args__isset {
  _Serv_get_bloom_stats_args__isset() : key(false) {}
  bool key;
} _Serv_get_bloom_stats_args__isset;

class Serv_get_bloom_stats_args {
 public:

  Serv_get_bloom_stats_args() : key() {
  }

  virtual ~Serv_get_bloom_stats_args() throw() {}

  std::string key;

  _Serv_get_bloom_stats_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const Serv_get_bloom_stats_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const Serv_get_bloom_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_bloom_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_get_bloom_stats_pargs {
 public:


  virtual ~Serv_get_bloom_stats_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_bloom_stats_result__isset {
  _Serv_get_bloom_stats_result__isset() : success(false) {}
  bool success;
} _Serv_get_bloom_stats_result__isset;

class Serv_get_bloom_stats_result {
 public:

  Serv_get_bloom_stats_result() {
  }

  virtual ~Serv_get_bloom_stats_result() throw() {}

  std::vector<memInfo>  success;

  _Serv_get_bloom_stats_result__isset __isset;

  void __set_success(const std::vector<memInfo> & val) {
    success = val;
  }

  bool operator == (const Serv_get_bloom_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_bloom_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_bloom_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_bloom_stats_presult__isset {
  _Serv_get_bloom_stats_presult__isset() : success(false) {}
  bool success;
} _Serv_get_bloom_stats_presult__isset;

class Serv_get_bloom_stats_presult {
 public:


  virtual ~Serv_get_bloom_stats_presult() throw() {}

  std::vector<memInfo> * success;

  _Serv_get_bloom_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_set_mem_args__isset {
  _Serv_set_mem_args__isset() : size(false) {}
  bool size;
} _Serv_set_mem_args__isset;

class Serv_set_mem_args {
 public:

  Serv_set_mem_args() : size(0) {
  }

  virtual ~Serv_set_mem_args() throw() {}

  int32_t size;

  _Serv_set_mem_args__isset __isset;

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const Serv_set_mem_args & rhs) const
  {
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const Serv_set_mem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_set_mem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_set_mem_pargs {
 public:


  virtual ~Serv_set_mem_pargs() throw() {}

  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_set_mem_result__isset {
  _Serv_set_mem_result__isset() : success(false) {}
  bool success;
} _Serv_set_mem_result__isset;

class Serv_set_mem_result {
 public:

  Serv_set_mem_result() : success(0) {
  }

  virtual ~Serv_set_mem_result() throw() {}

  int16_t success;

  _Serv_set_mem_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_set_mem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_set_mem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_set_mem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_set_mem_presult__isset {
  _Serv_set_mem_presult__isset() : success(false) {}
  bool success;
} _Serv_set_mem_presult__isset;

class Serv_set_mem_presult {
 public:


  virtual ~Serv_set_mem_presult() throw() {}

  int16_t* success;

  _Serv_set_mem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_get_one_args__isset {
  _Serv_get_one_args__isset() : key(false), url(false) {}
  bool key;
  bool url;
} _Serv_get_one_args__isset;

class Serv_get_one_args {
 public:

  Serv_get_one_args() : key(), url() {
  }

  virtual ~Serv_get_one_args() throw() {}

  std::string key;
  std::string url;

  _Serv_get_one_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const Serv_get_one_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Serv_get_one_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_one_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_get_one_pargs {
 public:


  virtual ~Serv_get_one_pargs() throw() {}

  const std::string* key;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_one_result__isset {
  _Serv_get_one_result__isset() : success(false) {}
  bool success;
} _Serv_get_one_result__isset;

class Serv_get_one_result {
 public:

  Serv_get_one_result() : success(0) {
  }

  virtual ~Serv_get_one_result() throw() {}

  int16_t success;

  _Serv_get_one_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_get_one_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_get_one_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_get_one_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_get_one_presult__isset {
  _Serv_get_one_presult__isset() : success(false) {}
  bool success;
} _Serv_get_one_presult__isset;

class Serv_get_one_presult {
 public:


  virtual ~Serv_get_one_presult() throw() {}

  int16_t* success;

  _Serv_get_one_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_fill_one_args__isset {
  _Serv_fill_one_args__isset() : key(false), url(false) {}
  bool key;
  bool url;
} _Serv_fill_one_args__isset;

class Serv_fill_one_args {
 public:

  Serv_fill_one_args() : key(), url() {
  }

  virtual ~Serv_fill_one_args() throw() {}

  std::string key;
  std::string url;

  _Serv_fill_one_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const Serv_fill_one_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Serv_fill_one_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_fill_one_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_fill_one_pargs {
 public:


  virtual ~Serv_fill_one_pargs() throw() {}

  const std::string* key;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_fill_one_result__isset {
  _Serv_fill_one_result__isset() : success(false) {}
  bool success;
} _Serv_fill_one_result__isset;

class Serv_fill_one_result {
 public:

  Serv_fill_one_result() : success(0) {
  }

  virtual ~Serv_fill_one_result() throw() {}

  int16_t success;

  _Serv_fill_one_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_fill_one_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_fill_one_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_fill_one_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_fill_one_presult__isset {
  _Serv_fill_one_presult__isset() : success(false) {}
  bool success;
} _Serv_fill_one_presult__isset;

class Serv_fill_one_presult {
 public:


  virtual ~Serv_fill_one_presult() throw() {}

  int16_t* success;

  _Serv_fill_one_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Serv_delete_blooms_args__isset {
  _Serv_delete_blooms_args__isset() : key(false) {}
  bool key;
} _Serv_delete_blooms_args__isset;

class Serv_delete_blooms_args {
 public:

  Serv_delete_blooms_args() : key() {
  }

  virtual ~Serv_delete_blooms_args() throw() {}

  std::string key;

  _Serv_delete_blooms_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const Serv_delete_blooms_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const Serv_delete_blooms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_delete_blooms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_delete_blooms_pargs {
 public:


  virtual ~Serv_delete_blooms_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_delete_blooms_result__isset {
  _Serv_delete_blooms_result__isset() : success(false) {}
  bool success;
} _Serv_delete_blooms_result__isset;

class Serv_delete_blooms_result {
 public:

  Serv_delete_blooms_result() : success(0) {
  }

  virtual ~Serv_delete_blooms_result() throw() {}

  int16_t success;

  _Serv_delete_blooms_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_delete_blooms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_delete_blooms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_delete_blooms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_delete_blooms_presult__isset {
  _Serv_delete_blooms_presult__isset() : success(false) {}
  bool success;
} _Serv_delete_blooms_presult__isset;

class Serv_delete_blooms_presult {
 public:


  virtual ~Serv_delete_blooms_presult() throw() {}

  int16_t* success;

  _Serv_delete_blooms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Serv_delete_blooms_all_args {
 public:

  Serv_delete_blooms_all_args() {
  }

  virtual ~Serv_delete_blooms_all_args() throw() {}


  bool operator == (const Serv_delete_blooms_all_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Serv_delete_blooms_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_delete_blooms_all_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_delete_blooms_all_pargs {
 public:


  virtual ~Serv_delete_blooms_all_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_delete_blooms_all_result__isset {
  _Serv_delete_blooms_all_result__isset() : success(false) {}
  bool success;
} _Serv_delete_blooms_all_result__isset;

class Serv_delete_blooms_all_result {
 public:

  Serv_delete_blooms_all_result() : success(0) {
  }

  virtual ~Serv_delete_blooms_all_result() throw() {}

  int16_t success;

  _Serv_delete_blooms_all_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Serv_delete_blooms_all_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_delete_blooms_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_delete_blooms_all_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_delete_blooms_all_presult__isset {
  _Serv_delete_blooms_all_presult__isset() : success(false) {}
  bool success;
} _Serv_delete_blooms_all_presult__isset;

class Serv_delete_blooms_all_presult {
 public:


  virtual ~Serv_delete_blooms_all_presult() throw() {}

  int16_t* success;

  _Serv_delete_blooms_all_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServClient : virtual public ServIf {
 public:
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int16_t add(const std::string& key, const int32_t max_elements, const double false_rate);
  void send_add(const std::string& key, const int32_t max_elements, const double false_rate);
  int16_t recv_add();
  void fill(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url);
  void send_fill(const std::string& key, const std::vector<element> & vector_url);
  void recv_fill(std::vector<element> & _return);
  void get(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url);
  void send_get(const std::string& key, const std::vector<element> & vector_url);
  void recv_get(std::vector<element> & _return);
  void get_stats(std::vector<memInfo> & _return);
  void send_get_stats();
  void recv_get_stats(std::vector<memInfo> & _return);
  void get_blooms_stats(std::vector<memInfo> & _return);
  void send_get_blooms_stats();
  void recv_get_blooms_stats(std::vector<memInfo> & _return);
  void get_bloom_stats(std::vector<memInfo> & _return, const std::string& key);
  void send_get_bloom_stats(const std::string& key);
  void recv_get_bloom_stats(std::vector<memInfo> & _return);
  int16_t set_mem(const int32_t size);
  void send_set_mem(const int32_t size);
  int16_t recv_set_mem();
  int16_t get_one(const std::string& key, const std::string& url);
  void send_get_one(const std::string& key, const std::string& url);
  int16_t recv_get_one();
  int16_t fill_one(const std::string& key, const std::string& url);
  void send_fill_one(const std::string& key, const std::string& url);
  int16_t recv_fill_one();
  int16_t delete_blooms(const std::string& key);
  void send_delete_blooms(const std::string& key);
  int16_t recv_delete_blooms();
  int16_t delete_blooms_all();
  void send_delete_blooms_all();
  int16_t recv_delete_blooms_all();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_blooms_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_bloom_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_mem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_one(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill_one(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_blooms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_blooms_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServProcessor(boost::shared_ptr<ServIf> iface) :
    iface_(iface) {
    processMap_["add"] = &ServProcessor::process_add;
    processMap_["fill"] = &ServProcessor::process_fill;
    processMap_["get"] = &ServProcessor::process_get;
    processMap_["get_stats"] = &ServProcessor::process_get_stats;
    processMap_["get_blooms_stats"] = &ServProcessor::process_get_blooms_stats;
    processMap_["get_bloom_stats"] = &ServProcessor::process_get_bloom_stats;
    processMap_["set_mem"] = &ServProcessor::process_set_mem;
    processMap_["get_one"] = &ServProcessor::process_get_one;
    processMap_["fill_one"] = &ServProcessor::process_fill_one;
    processMap_["delete_blooms"] = &ServProcessor::process_delete_blooms;
    processMap_["delete_blooms_all"] = &ServProcessor::process_delete_blooms_all;
  }

  virtual ~ServProcessor() {}
};

class ServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServProcessorFactory(const ::boost::shared_ptr< ServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServIfFactory > handlerFactory_;
};

class ServMultiface : virtual public ServIf {
 public:
  ServMultiface(std::vector<boost::shared_ptr<ServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServIf> > ifaces_;
  ServMultiface() {}
  void add(boost::shared_ptr<ServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int16_t add(const std::string& key, const int32_t max_elements, const double false_rate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(key, max_elements, false_rate);
    }
    return ifaces_[i]->add(key, max_elements, false_rate);
  }

  void fill(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill(_return, key, vector_url);
    }
    ifaces_[i]->fill(_return, key, vector_url);
    return;
  }

  void get(std::vector<element> & _return, const std::string& key, const std::vector<element> & vector_url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key, vector_url);
    }
    ifaces_[i]->get(_return, key, vector_url);
    return;
  }

  void get_stats(std::vector<memInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_stats(_return);
    }
    ifaces_[i]->get_stats(_return);
    return;
  }

  void get_blooms_stats(std::vector<memInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_blooms_stats(_return);
    }
    ifaces_[i]->get_blooms_stats(_return);
    return;
  }

  void get_bloom_stats(std::vector<memInfo> & _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_bloom_stats(_return, key);
    }
    ifaces_[i]->get_bloom_stats(_return, key);
    return;
  }

  int16_t set_mem(const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_mem(size);
    }
    return ifaces_[i]->set_mem(size);
  }

  int16_t get_one(const std::string& key, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_one(key, url);
    }
    return ifaces_[i]->get_one(key, url);
  }

  int16_t fill_one(const std::string& key, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill_one(key, url);
    }
    return ifaces_[i]->fill_one(key, url);
  }

  int16_t delete_blooms(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_blooms(key);
    }
    return ifaces_[i]->delete_blooms(key);
  }

  int16_t delete_blooms_all() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_blooms_all();
    }
    return ifaces_[i]->delete_blooms_all();
  }

};



#endif
